/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.konser_oop2.pembeli;

import com.mycompany.konser_oop2.connection;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.*;
import javax.swing.*;

/**
 *
 * @author Gita Aulia Hafid
 */
public class riwayatPembeli extends javax.swing.JFrame {

    private String id_pembeli;
    private JPanel containerRiwayat;
    private JLabel usernameLabel;
    
    public riwayatPembeli(String id_pembeli) {
         this.id_pembeli = id_pembeli;

        // === UI Setup ===
        try {
            UIManager.setLookAndFeel(new com.formdev.flatlaf.FlatLightLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }

        setTitle("Riwayat Pemesanan");
        setSize(800, 500);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());
        getContentPane().setBackground(Color.WHITE);

        // === Navbar ===
        navbar navbar = new navbar(id_pembeli);
        add(navbar, BorderLayout.NORTH);

        // === Panel Scroll untuk Riwayat ===
        containerRiwayat = new JPanel();
        containerRiwayat.setLayout(new BoxLayout(containerRiwayat, BoxLayout.Y_AXIS));
        containerRiwayat.setBackground(Color.WHITE);

        JScrollPane scrollPane = new JScrollPane(containerRiwayat);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);

        add(scrollPane, BorderLayout.CENTER);

        // === Load data riwayat ===
        loadRiwayat();

        setVisible(true);
    }
    
     private void loadRiwayat() {
        containerRiwayat.removeAll();

        try {
            Connection conn = connection.getConnection();
            String query = "SELECT rp.id_det_tiket, rp.kursi, rp.tanggal_transaksi, " +
                    "dk.harga_tiket, kt.kategori_konser, k.nama_band, k.nama_konser, k.lokasi, k.jam, k.tanggal " +
                    "FROM riwayat_pembeli rp " +
                    "JOIN detail_kategori_tiket dk ON rp.id_det_tiket = dk.id_det_tiket " + 
                    "JOIN kategori_tiket kt ON dk.id_kategori_tiket = kt.id_kategori_tiket " +
                    "JOIN konser k ON dk.id_konser = k.id_konser " +
                    "WHERE rp.id_pembeli = ?";

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, id_pembeli);
            ResultSet rs = ps.executeQuery();

            boolean adaData = false;

            while (rs.next()) {
                adaData = true;
                String namaKonser = rs.getString("nama_konser");
                String namaBand = rs.getString("nama_band");
                String tanggal = rs.getString("tanggal");
                String jam = rs.getString("jam");
                String lokasi = rs.getString("lokasi");
                String kursi = rs.getString("kursi");
                String kategori = rs.getString("kategori_konser");
                String id_detRiwayat = rs.getString("id_det_tiket");
                

                cardRiwayatPanel card = new cardRiwayatPanel(id_detRiwayat, namaKonser, namaBand, tanggal, jam, lokasi, kursi, kategori);
                card.setCursor(new Cursor(Cursor.HAND_CURSOR));

                card.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        new detailRiwayatKonser(card.getIdTiket(), id_pembeli).setVisible(true);
                        dispose();
                    }
                });

                containerRiwayat.add(card);
                containerRiwayat.add(Box.createRigidArea(new Dimension(0, 10)));
            }

            if (!adaData) {
                JLabel kosongLbl = new JLabel("Belum ada riwayat pemesanan.");
                kosongLbl.setFont(new Font("SansSerif", Font.PLAIN, 16));
                kosongLbl.setForeground(Color.GRAY);
                kosongLbl.setAlignmentX(Component.CENTER_ALIGNMENT);
                containerRiwayat.add(Box.createVerticalGlue());
                containerRiwayat.add(kosongLbl);
                containerRiwayat.add(Box.createVerticalGlue());
            }

            containerRiwayat.revalidate();
            containerRiwayat.repaint();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
